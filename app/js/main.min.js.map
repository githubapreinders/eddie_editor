{"version":3,"sources":["app.js","application.js","controllers.js","services.js","xmlTag.js"],"names":[],"mappings":"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","file":"main.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('template1', ['ui.router'])\r\n    .config(function ($stateProvider, $urlRouterProvider)\r\n    {\r\n        $stateProvider\r\n\r\n        // route for the home page\r\n            .state('app', {\r\n                url: '/',\r\n                views: {\r\n                    'content': {\r\n                        templateUrl: 'views/home.html',\r\n                        controller: 'IndexController as vm'\r\n                    }\r\n                }\r\n            })\r\n        ;\r\n        $urlRouterProvider.otherwise('/');\r\n    })\r\n;","(function()\r\n{\r\n    var app = angular.module('confab',['ui.router']);\r\n\r\n\r\napp.config(function ($stateProvider, $urlRouterProvider)\r\n{\r\n    console.log('Application config...')\r\n    $stateProvider\r\n\r\n    // route for the home page\r\n        .state('app', {\r\n            url: '/',\r\n            views: {\r\n                'content': {\r\n                    templateUrl: 'views/home.html',\r\n                    controller: 'IndexController as vm'\r\n                }\r\n            }\r\n        })\r\n    ;\r\n    $urlRouterProvider.otherwise('/');\r\n\r\n    \r\n});\r\n\r\n})();","(function ()\r\n{\r\n    'use strict';\r\n\r\n    angular.module('confab')\r\n        .controller('IndexController', function (xmlTag, staticDataFactory)\r\n        {\r\n\r\n            console.log('IndexController...');\r\n            var vm = this;\r\n            vm.submitForm = submitForm;\r\n\r\n            vm.message = \"Angular Controller is working allright...\";\r\n            vm.myTags = staticDataFactory.getData();\r\n            console.log(\"mytags\",vm.myTags);\r\n\r\n            \r\n\r\n\r\n            function submitForm(string)\r\n\r\n            {\r\n            \tif (vm.userInput !== \"\")\r\n            \t{\r\n            \t\tvar values = vm.userInput.split(/\\s+/);\r\n            \t\tconsole.log(\"values from splitter:\", values);\r\n            \t\tvar tagtitle = values.shift();\r\n            \t\tvar tagproperties = [];\r\n            \t\tif (values.length > 0)\r\n            \t\t{\r\n            \t\t\tvalues.forEach(function(val)\r\n            \t\t\t{\r\n            \t\t\t\ttagproperties.push(val);\r\n            \t\t\t});\r\n            \t\t}\r\n            \tvm.myTags.push(new xmlTag(tagtitle, tagproperties));\r\n\r\n            \t}\r\n            \t\r\n            }\r\n\r\n        });\r\n})();\r\n\r\n\r\n","(function(){\r\n\r\n'use strict';\r\n\r\nangular.module('confab')\r\n\r\n    .service('staticDataFactory', function(xmlTag) \r\n    {\r\n        var thedata = [new xmlTag('potato',['prop1', 'prop2','prop3']),\r\n                       new xmlTag('chickpea',['prop1', 'prop2','prop3']),\r\n                       new xmlTag('currypaste',['prop1', 'prop2'])];\r\n\r\n        return{\r\n            getData : getData\r\n        }\r\n\r\n        \r\n        \r\n        function getData()\r\n        {\r\n            return thedata;\r\n        }\r\n\r\n\r\n    })\r\n\r\n})();   ","(function ()\r\n{\r\n    \r\n/*\r\n    Defines an xmlTag object that will be used as the main data carrier in the editor;\r\n    Its main feature is that it is a tag with a possible string of text after it - the suffix\r\n*/\r\nangular.module('confab')\r\n\r\n    .factory('xmlTag', function() \r\n        {\r\n            /*\r\n            tagTypes are \"STARTTAG\", \"COMBITAG\", and \"ENDTAG\"\r\n            */\r\n    \r\n                function xmlTag(tagtitle, proparray) \r\n                {\r\n                    this.suffix = \"\";\r\n                    this.tagType = \"STARTTAG\";\r\n                    this.tagTitle = tagtitle;\r\n                    tagProperties = {};\r\n                    proparray.forEach(function(prop)\r\n                    {\r\n                        tagProperties[prop] = \"\";\r\n                    }); \r\n                    this.tagProperties = tagProperties;                   \r\n                }\r\n                //native functions of the xmlTag that can access the instance properties\r\n                xmlTag.prototype = \r\n                {\r\n                    getTagType : function()\r\n                    {\r\n                        return this.tagType;\r\n                    },\r\n                    setTagType : function(astring)\r\n                    {\r\n                        switch (astring)\r\n                        {\r\n                            case \"STARTTAG\":{this.tagType = \"STARTTAG\"; break;}\r\n                            case \"COMBITAG\":{this.tagType = \"COMBITAG\";break;}\r\n                            case \"ENDTAG\":{this.tagType = \"ENDTAG\";break;}\r\n                            default :{console.log(\"tagType is set to default..\",astring,\" is unknown type.\");\r\n                                        this.tagType = \"STARTTAG\";}\r\n                        }\r\n\r\n                    },\r\n                    //converts its contents to a readable xml-tag, dependent on its type\r\n                    toString : function()\r\n                    {\r\n                        var returnstring = \"\";  \r\n                        var itsproperties = \"\"; \r\n                        \r\n                        angular.forEach(this.tagProperties, function(value, key)\r\n                        {\r\n                            if (value == \"\")\r\n                            {\r\n                                itsproperties += \" \" + key + \"=\\\"\\\" \" + \" \";\r\n                            }\r\n                            else\r\n                            {\r\n                                itsproperties += \" \" + key + \"=\" + value + \" \";   \r\n                            }\r\n\r\n                        });\r\n\r\n\r\n                        switch (this.tagType)\r\n                        {\r\n                            \r\n                            case \"STARTTAG\":\r\n                            {\r\n                                returnstring =           \"< \" + \r\n                                                this.tagTitle + \r\n                                                itsproperties + \r\n                                                \" >\"; \r\n                                                break;\r\n\r\n                            }\r\n                            case \"COMBITAG\":\r\n                            {\r\n                                returnstring =           \"< \" + \r\n                                                this.tagTitle +\r\n                                                itsproperties + \r\n                                                \" />\";\r\n                                                break;\r\n                            }\r\n                            case \"ENDTAG\":{returnstring = \"</ \" + this.tagTitle + \" >\";break;}\r\n                        }\r\n\r\n                        return returnstring;\r\n                    },\r\n                    setProperty :function (key, value)\r\n                    {\r\n                        this.tagProperties[key] = value;\r\n                    },\r\n                    getPropertyValue :function (key)\r\n                    {\r\n                        return this.tagProperties[key];\r\n                    }\r\n\r\n\r\n\r\n\r\n                };\r\n               /*static functions that have no access to this:\r\n                xmlTag.computeTabdistance = function(tag)\r\n                {\r\n                    return tabdistance\r\n                }\r\n               */\r\n            \r\n            return (xmlTag);\r\n\r\n            \r\n\r\n        })\r\n\r\n    .factory('tagContainer', function()\r\n    {\r\n        function tagContainer()\r\n        {\r\n            this.tagContainer = [];\r\n\r\n        }\r\n\r\n\r\n        tagContainer.prototype = function() \r\n        {\r\n\r\n        }\r\n\r\n    });\r\n\r\n})();"],"sourceRoot":"/source/"}